import pandas as pd
from transformers import pipeline
from detoxify import Detoxify
from rouge_score import rouge_scorer
import bert_score

# Define Sample Input Texts
sample_texts = [
    "An American woman died aboard a cruise ship that docked at Rio de Janeiro on Tuesday, the same ship on which 86 passengers previously fell ill, according to the state-run Brazilian news agency, Agencia Brasil. The American tourist died aboard the MS Veendam, owned by cruise operator Holland America. Federal Police told Agencia Brasil that forensic doctors were investigating her death. The ship's doctors told police that the woman was elderly and suffered from diabetes and hypertension, according the agency. The other passengers came down with diarrhea prior to her death during an earlier part of the trip, the ship's doctors said. The Veendam left New York 36 days ago for a South America tour."
]
# Load Summarization Models
bart = pipeline("summarization", model="facebook/bart-large-cnn")
t5 = pipeline("summarization", model="t5-base")

def prepare_input(text, model_name):
    return f"summarize: {text.strip()}" if model_name == "t5" else text.strip()

#  Generate Summaries
def generate_summaries(text_list):
    results = []
    for idx, text in enumerate(text_list):
        for model_name, model in [("bart", bart), ("t5", t5)]:
            input_text = prepare_input(text, model_name)
            try:
                summary = model(input_text, max_length=100, min_length=30, do_sample=False)[0]['summary_text']
            except Exception as e:
                summary = f"Error: {str(e)}"
            results.append({
                "id": idx,
                "input_text": text,
                "model": model_name.upper(),
                "summary": summary
            })
    return pd.DataFrame(results)

summary_df = generate_summaries(sample_texts)

# Toxicity Scoring
tox_model = Detoxify('original')

summary_df['toxicity_input'] = summary_df['input_text'].apply(lambda x: tox_model.predict(x)['toxicity'])
summary_df['toxicity_summary'] = summary_df['summary'].apply(lambda x: tox_model.predict(x)['toxicity'])
summary_df['toxicity_delta'] = summary_df['toxicity_input'] - summary_df['toxicity_summary']

# ROUGE Evaluation
rouge = rouge_scorer.RougeScorer(['rougeL'], use_stemmer=True)

def compute_rouge(row):
    try:
        score = rouge.score(row['input_text'], row['summary'])
        return score['rougeL'].fmeasure
    except:
        return None

summary_df['rougeL_f1'] = summary_df.apply(compute_rouge, axis=1)

# BERTScore Evaluation
try:
    P, R, F1 = bert_score.score(
        summary_df['summary'].tolist(),
        summary_df['input_text'].tolist(),
        lang='en',
        verbose=True
    )
    summary_df['bertscore_f1'] = F1.numpy()
except Exception as e:
    summary_df['bertscore_f1'] = f"Error: {str(e)}"

# Save Output
csv_path = "full_summarization_evaluation.csv"
summary_df.to_csv(csv_path, index=False)
print(f" Saved: {csv_path}")
